// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// heterozygosity
List heterozygosity(std::string vcffile, std::string region, std::string samples, bool pass, double qual);
RcppExport SEXP _vcfppR_heterozygosity(SEXP vcffileSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP passSEXP, SEXP qualSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type pass(passSEXP);
    Rcpp::traits::input_parameter< double >::type qual(qualSEXP);
    rcpp_result_gen = Rcpp::wrap(heterozygosity(vcffile, region, samples, pass, qual));
    return rcpp_result_gen;
END_RCPP
}
// summaryVariants
List summaryVariants(std::string vcffile, std::string region, std::string samples, bool filter_pass, double qual);
RcppExport SEXP _vcfppR_summaryVariants(SEXP vcffileSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP filter_passSEXP, SEXP qualSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type filter_pass(filter_passSEXP);
    Rcpp::traits::input_parameter< double >::type qual(qualSEXP);
    rcpp_result_gen = Rcpp::wrap(summaryVariants(vcffile, region, samples, filter_pass, qual));
    return rcpp_result_gen;
END_RCPP
}
// summarySVs
List summarySVs(std::string vcffile, std::string region, std::string samples, bool filter_pass, double qual);
RcppExport SEXP _vcfppR_summarySVs(SEXP vcffileSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP filter_passSEXP, SEXP qualSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type filter_pass(filter_passSEXP);
    Rcpp::traits::input_parameter< double >::type qual(qualSEXP);
    rcpp_result_gen = Rcpp::wrap(summarySVs(vcffile, region, samples, filter_pass, qual));
    return rcpp_result_gen;
END_RCPP
}
// tableGT
List tableGT(std::string vcffile, std::string region, std::string samples, std::string format, const std::vector<std::string>& ids, double qualval, bool pass, bool INFO, bool snps, bool indels, bool multiallelics, bool multisnps, bool svs, int mac);
RcppExport SEXP _vcfppR_tableGT(SEXP vcffileSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP formatSEXP, SEXP idsSEXP, SEXP qualvalSEXP, SEXP passSEXP, SEXP INFOSEXP, SEXP snpsSEXP, SEXP indelsSEXP, SEXP multiallelicsSEXP, SEXP multisnpsSEXP, SEXP svsSEXP, SEXP macSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< double >::type qualval(qualvalSEXP);
    Rcpp::traits::input_parameter< bool >::type pass(passSEXP);
    Rcpp::traits::input_parameter< bool >::type INFO(INFOSEXP);
    Rcpp::traits::input_parameter< bool >::type snps(snpsSEXP);
    Rcpp::traits::input_parameter< bool >::type indels(indelsSEXP);
    Rcpp::traits::input_parameter< bool >::type multiallelics(multiallelicsSEXP);
    Rcpp::traits::input_parameter< bool >::type multisnps(multisnpsSEXP);
    Rcpp::traits::input_parameter< bool >::type svs(svsSEXP);
    Rcpp::traits::input_parameter< int >::type mac(macSEXP);
    rcpp_result_gen = Rcpp::wrap(tableGT(vcffile, region, samples, format, ids, qualval, pass, INFO, snps, indels, multiallelics, multisnps, svs, mac));
    return rcpp_result_gen;
END_RCPP
}
// tableFormat
List tableFormat(std::string vcffile, std::string region, std::string samples, std::string format, const std::vector<std::string>& ids, double qualval, bool pass, bool INFO, bool snps, bool indels, bool multiallelics, bool multisnps, bool svs);
RcppExport SEXP _vcfppR_tableFormat(SEXP vcffileSEXP, SEXP regionSEXP, SEXP samplesSEXP, SEXP formatSEXP, SEXP idsSEXP, SEXP qualvalSEXP, SEXP passSEXP, SEXP INFOSEXP, SEXP snpsSEXP, SEXP indelsSEXP, SEXP multiallelicsSEXP, SEXP multisnpsSEXP, SEXP svsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< double >::type qualval(qualvalSEXP);
    Rcpp::traits::input_parameter< bool >::type pass(passSEXP);
    Rcpp::traits::input_parameter< bool >::type INFO(INFOSEXP);
    Rcpp::traits::input_parameter< bool >::type snps(snpsSEXP);
    Rcpp::traits::input_parameter< bool >::type indels(indelsSEXP);
    Rcpp::traits::input_parameter< bool >::type multiallelics(multiallelicsSEXP);
    Rcpp::traits::input_parameter< bool >::type multisnps(multisnpsSEXP);
    Rcpp::traits::input_parameter< bool >::type svs(svsSEXP);
    rcpp_result_gen = Rcpp::wrap(tableFormat(vcffile, region, samples, format, ids, qualval, pass, INFO, snps, indels, multiallelics, multisnps, svs));
    return rcpp_result_gen;
END_RCPP
}
// tableInfo
List tableInfo(std::string vcffile, std::string tag, std::string region, const std::vector<std::string>& ids, double qualval, bool pass, bool snps, bool indels, bool multiallelics, bool multisnps, bool svs);
RcppExport SEXP _vcfppR_tableInfo(SEXP vcffileSEXP, SEXP tagSEXP, SEXP regionSEXP, SEXP idsSEXP, SEXP qualvalSEXP, SEXP passSEXP, SEXP snpsSEXP, SEXP indelsSEXP, SEXP multiallelicsSEXP, SEXP multisnpsSEXP, SEXP svsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcffile(vcffileSEXP);
    Rcpp::traits::input_parameter< std::string >::type tag(tagSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< double >::type qualval(qualvalSEXP);
    Rcpp::traits::input_parameter< bool >::type pass(passSEXP);
    Rcpp::traits::input_parameter< bool >::type snps(snpsSEXP);
    Rcpp::traits::input_parameter< bool >::type indels(indelsSEXP);
    Rcpp::traits::input_parameter< bool >::type multiallelics(multiallelicsSEXP);
    Rcpp::traits::input_parameter< bool >::type multisnps(multisnpsSEXP);
    Rcpp::traits::input_parameter< bool >::type svs(svsSEXP);
    rcpp_result_gen = Rcpp::wrap(tableInfo(vcffile, tag, region, ids, qualval, pass, snps, indels, multiallelics, multisnps, svs));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_vcfreader();
RcppExport SEXP _rcpp_module_boot_vcfwriter();

static const R_CallMethodDef CallEntries[] = {
    {"_vcfppR_heterozygosity", (DL_FUNC) &_vcfppR_heterozygosity, 5},
    {"_vcfppR_summaryVariants", (DL_FUNC) &_vcfppR_summaryVariants, 5},
    {"_vcfppR_summarySVs", (DL_FUNC) &_vcfppR_summarySVs, 5},
    {"_vcfppR_tableGT", (DL_FUNC) &_vcfppR_tableGT, 14},
    {"_vcfppR_tableFormat", (DL_FUNC) &_vcfppR_tableFormat, 13},
    {"_vcfppR_tableInfo", (DL_FUNC) &_vcfppR_tableInfo, 11},
    {"_rcpp_module_boot_vcfreader", (DL_FUNC) &_rcpp_module_boot_vcfreader, 0},
    {"_rcpp_module_boot_vcfwriter", (DL_FUNC) &_rcpp_module_boot_vcfwriter, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_vcfppR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
